// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: asrt.proto
// </auto-generated>
// Original file comments:
// Copyright 2016-2099 Ailemon.net
//
// This file is part of ASRT Speech Recognition Tool.
//
// ASRT is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// ASRT is distributed in the hope that it will be useful,
//
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ASRT.  If not, see <https://www.gnu.org/licenses/>.
// ============================================================================ 
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ailemon.Asrt.Grpc {
  /// <summary>
  ///定义服务接口
  /// </summary>
  public static partial class AsrtGrpcService
  {
    static readonly string __ServiceName = "ailemon.asrt.grpc.AsrtGrpcService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ailemon.Asrt.Grpc.SpeechRequest> __Marshaller_ailemon_asrt_grpc_SpeechRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ailemon.Asrt.Grpc.SpeechRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ailemon.Asrt.Grpc.SpeechResponse> __Marshaller_ailemon_asrt_grpc_SpeechResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ailemon.Asrt.Grpc.SpeechResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ailemon.Asrt.Grpc.LanguageRequest> __Marshaller_ailemon_asrt_grpc_LanguageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ailemon.Asrt.Grpc.LanguageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ailemon.Asrt.Grpc.TextResponse> __Marshaller_ailemon_asrt_grpc_TextResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ailemon.Asrt.Grpc.TextResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.SpeechResponse> __Method_Speech = new grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.SpeechResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Speech",
        __Marshaller_ailemon_asrt_grpc_SpeechRequest,
        __Marshaller_ailemon_asrt_grpc_SpeechResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ailemon.Asrt.Grpc.LanguageRequest, global::Ailemon.Asrt.Grpc.TextResponse> __Method_Language = new grpc::Method<global::Ailemon.Asrt.Grpc.LanguageRequest, global::Ailemon.Asrt.Grpc.TextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Language",
        __Marshaller_ailemon_asrt_grpc_LanguageRequest,
        __Marshaller_ailemon_asrt_grpc_TextResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse> __Method_All = new grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_ailemon_asrt_grpc_SpeechRequest,
        __Marshaller_ailemon_asrt_grpc_TextResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse> __Method_Stream = new grpc::Method<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Stream",
        __Marshaller_ailemon_asrt_grpc_SpeechRequest,
        __Marshaller_ailemon_asrt_grpc_TextResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ailemon.Asrt.Grpc.AsrtReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AsrtGrpcService</summary>
    [grpc::BindServiceMethod(typeof(AsrtGrpcService), "BindService")]
    public abstract partial class AsrtGrpcServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ailemon.Asrt.Grpc.SpeechResponse> Speech(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ailemon.Asrt.Grpc.TextResponse> Language(global::Ailemon.Asrt.Grpc.LanguageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ailemon.Asrt.Grpc.TextResponse> All(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Stream(grpc::IAsyncStreamReader<global::Ailemon.Asrt.Grpc.SpeechRequest> requestStream, grpc::IServerStreamWriter<global::Ailemon.Asrt.Grpc.TextResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AsrtGrpcService</summary>
    public partial class AsrtGrpcServiceClient : grpc::ClientBase<AsrtGrpcServiceClient>
    {
      /// <summary>Creates a new client for AsrtGrpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AsrtGrpcServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AsrtGrpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AsrtGrpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AsrtGrpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AsrtGrpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.SpeechResponse Speech(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Speech(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.SpeechResponse Speech(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Speech, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.SpeechResponse> SpeechAsync(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpeechAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.SpeechResponse> SpeechAsync(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Speech, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.TextResponse Language(global::Ailemon.Asrt.Grpc.LanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Language(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.TextResponse Language(global::Ailemon.Asrt.Grpc.LanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Language, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.TextResponse> LanguageAsync(global::Ailemon.Asrt.Grpc.LanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LanguageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.TextResponse> LanguageAsync(global::Ailemon.Asrt.Grpc.LanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Language, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.TextResponse All(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return All(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ailemon.Asrt.Grpc.TextResponse All(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.TextResponse> AllAsync(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ailemon.Asrt.Grpc.TextResponse> AllAsync(global::Ailemon.Asrt.Grpc.SpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse> Stream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse> Stream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Stream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AsrtGrpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AsrtGrpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AsrtGrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Speech, serviceImpl.Speech)
          .AddMethod(__Method_Language, serviceImpl.Language)
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_Stream, serviceImpl.Stream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AsrtGrpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Speech, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.SpeechResponse>(serviceImpl.Speech));
      serviceBinder.AddMethod(__Method_Language, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ailemon.Asrt.Grpc.LanguageRequest, global::Ailemon.Asrt.Grpc.TextResponse>(serviceImpl.Language));
      serviceBinder.AddMethod(__Method_All, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse>(serviceImpl.All));
      serviceBinder.AddMethod(__Method_Stream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Ailemon.Asrt.Grpc.SpeechRequest, global::Ailemon.Asrt.Grpc.TextResponse>(serviceImpl.Stream));
    }

  }
}
#endregion
